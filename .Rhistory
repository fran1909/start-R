print(Variable)
comb <- data.frame(Species,Variable)
print(comb)
#5Using dataframe from exercise 4, make a data frame with the following variables:
#Species.
#Variable.
#Mean, the mean for each variable and species.
#Standard_error, the standard error for each variable and species.
#Median, the median for each variable and species.
#Minimum, the minimum for each variable and species.
#Maximum, the maximum for each variable and species.
D1 <- data.frame()
D2 <- data.frame()
D1 <- expand.grid(unique(iris$Species), unique(Variable))
D1 <- data.frame(D1)
colnames(D1) <- c("Species", "Variable")
D1
D2 <- D1
D2
for (i in 1:length(D2$Species)){
current_species <- D1$Species[i]
current_variable <- D1$Variable[i]
name_of_current_variable = as.character(current_variable)
myvar <- c(as.character(current_variable),"Species")
newdata <- iris[myvar]
finaldata <- newdata[ which(newdata$Species==as.character(current_species)), ]
values_needed <- finaldata[name_of_current_variable]
values_needed <- unlist(values_needed, use.names=FALSE)
print(newdata)
print(finaldata)
print(values_needed)
print(typeof(values_needed))
D2$Mean[i] <- mean(values_needed)
D2$Standard_error[i] <- sd(values_needed) / sqrt(length(values_needed))
D2$Median[i] <- median(values_needed)
D2$Minimum[i] <- min(values_needed)
D2$Maximum[i] <- max(values_needed)
}
D2
#6Install the package “writexl” and use the command write_xlsx
#to create a “yourname.xlsx” file with your data frame.
library("writexl")
write_xlsx(D2,"C:\\Users\\marti\\Documents\\FranciscoMM.xlsx")
View(comb)
plot(iris)
plot(SEPAL~PETAL, col = SP, xlab = "Petal length (cm)",
ylab = "Sepal length (cm)")
plot(SEPAL~PETAL, col = SP, xlab = "Petal length (cm)",
ylab = "Sepal length (cm)")
plot(SEPAL~PETAL, col = SP, xlab = "Petal length (cm)",
ylab = "Sepal length (cm)")
install.packages(read "xlsx")
install.packages(c("read", "xlsimple"))
#1.Plot a cheat-sheet with values of color and point type (col = , and pch = )
#from 1 to 25, and export it as a jpeg of 15 cm wide,
#6 cm high and resolution 100 points per cm.
plot(0,0, xlim = c(0, 26), ylim = c(0.5,1.5)
ylab = "color & shape", xlab= "color & shape numbers", yatx= "n")
#1.Plot a cheat-sheet with values of color and point type (col = , and pch = )
#from 1 to 25, and export it as a jpeg of 15 cm wide,
#6 cm high and resolution 100 points per cm.
plot(0, 0, xlim = c(0, 26), ylim = c(0.5,1.5) ,
ylab = "color & shape", xlab= "color & shape numbers", yatx= "n")
#1.Plot a cheat-sheet with values of color and point type (col = , and pch = )
#from 1 to 25, and export it as a jpeg of 15 cm wide,
#6 cm high and resolution 100 points per cm.
plot(0, 0, xlim = c(0, 26), ylim = c(0.5,1.5) ,
ylab = "color & shape", xlab= "color & shape numbers", yatx = "n")
#1.Plot a cheat-sheet with values of color and point type (col = , and pch = )
#from 1 to 25, and export it as a jpeg of 15 cm wide,
#6 cm high and resolution 100 points per cm.
plot(0, 0, xlim = c(0, 26), ylim = c(0.5,1.5),
ylab = "color & shape", xlab= "color & shape numbers", yatx = "n")
for (i in 1:25) {
points(i,1, pch = i, col = i, cex = 1.5)
}
#2.Plot into a graph ten Poisson distributions with lambda ranging from 1 to 10.
#Put legend and title. Export it as a .tiff file with size of 15x15 cm.
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
# export into tiff plot
tiff("Plot_1poisson _1to10. tiff" , width = 15, height = 15, units = "cm",
bg = "transparent" , rest = 150)
# export into tiff plot
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent" , rest = 150)
# export into tiff plot
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
getwd()
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
getwd()
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
getwd()
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
getwd()
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
# export into tiff plot
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm",
bg = "transparent", rest = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
tiff("Plot_1poisson_1to10.tiff", width = 15, height = 15, units = "cm", bg = "transparent", res = 150)
x <- seq(-1, 20, 1)
y <- dpois(x,lambda = 1)
plot(x, y, type = "n")
for (i in 1:10) {
y <- dpois(x, lambda = i)
lines(x,y, col = i)
}
title(main= "poisson distribution, lamda = 1:10 ")
legend("topright", legend = paste("lamba =", 1:10 ),lty = 1, col = 1:10)
dev.off()
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = ",")
str(Data)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = "," skin = 2)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = "," skin = 2)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = "," skin = 2)
Data[-1]
str(Data)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = ",", skin = 2)
Data[-1]
str(Data)
Data <- read.table(Webcsv, header = T, sep = ",", sskip = 2)
Data[-1]
str(Data)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = ",", sskip = 2)
Data[-1]
str(Data)
View(Data)
Webcsv <-"https://doi.org/10.7717/peerj.328/supp-1"
Data <- read.table(Webcsv, header = T, sep = ",", sskip = 2)
Data[-1]
str(Data)
View(Data)
Webcsv <-"https://dfzljdn9uc3pi.cloudfront.net/2014/328/1/Appendix1.csv"
Data <- read.table(Webcsv, header = T, sep = ",", sskip = 2)
Data[-1]
str(Data)
Webcsv <-"https://dfzljdn9uc3pi.cloudfront.net/2014/328/1/Appendix1.csv"
Data <- read.table(Webcsv, header = T, sep = ",", skip = 2)
Data[-1]
str(Data)
View(Data)
Data <- Data [-1]
Data$crop <- as.factor(Data$crop)
for (i in names(Data[5:11])) {
plot(Data$mean_yield ~ Data[[i]], ylab = "Mean yields", xlab = as.character(names(Data[i])), col = Data$crop)
title(main= paste("Mean yield in function of", as.character(names(Data[i]))))
}
pdf("R3MARTINEZ.pdf")
for (i in names(Data[5:11])) {
plot(Data$mean_yield ~ Data[[i]], ylab = "Mean yields", xlab = as.character(names(Data[i])), col = Data$crop)
title(main= paste("Mean yield in function of", as.character(names(Data[i]))))
}
dev.off()
getwd()
pdf("R3MARTINEZ.pdf")
for (i in names(Data[5:11])) {
plot(Data$mean_yield ~ Data[[i]], ylab = "Mean Yields", xlab = as.character(names(Data[i])), col = Data$crop)
title(main= paste("Mean Yield in function of", as.character(names(Data[i]))))
}
dev.off()
getwd()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
tn <- 5
cap <- paste("Table", tn, ":whatever.")
data.frame(InsectSpray)
data.frame(InsectSprays)
str(InsectSprays$spray)
print(Species)
print(Variable)
comb <- data.frame(Species,Variable)
print(comb)
Sprayname <- InsectSprays
total <- InsectSprays$count
View(Sprayname)
subset()
data.frame(InsectSprays)
View(Sprayname)
## For the data InsectSpray, make a table for the number of insects for each spray with the mean, median and standard error.
#Note: Remember to use knitr::kable(), or a similar function to print the table with its caption.
```{r}
me <- med <- se <- In <- numeric()
sp <- character()
for(i in levels(InsectSprays$spray)){   #i is a random value given to the spray column.
for(j in names(InsectSprays)[-2]){    #j is a random value given to the count column.
sp <-c(sp,i)                   # vector that allows to go through the values related to the levels of spray.
x <- InsectSprays[InsectSprays$spray ==i,j]
me <- round(c(me, mean(x)), 2)
se <- round(c(se, sd(x) / sqrt(length(x))),2)
med <- c(med, median(x))
In <- c(In, sum(x))
}
}
d <- data.frame(Spray  = sp,
Insects_count = In,
Mean = me,
Standarderror = se,
Median = med)
```
install.packages("agricolae")
library(agricolae)
d <- data.frame(Spray  = sp,
Insects_count = In,
Mean = me,
Standarderror = se,
Median = med)
me <- med <- se <- In <- numeric()
me <- med <- se <- In <- numeric()
sp <- character()
for(i in levels(InsectSprays$spray)){   #i is a random value given to the spray column.
for(j in names(InsectSprays)[-2]){    #j is a random value given to the count column.
sp <-c(sp,i)                   # vector that allows to go through the values related to the levels of spray.
x <- InsectSprays[InsectSprays$spray ==i,j]
me <- round(c(me, mean(x)), 2)
se <- round(c(se, sd(x) / sqrt(length(x))),2)
med <- c(med, median(x))
In <- c(In, sum(x))
}
}
d <- data.frame(Spray  = sp,
Insects_count = In,
Mean = me,
Standarderror = se,
Median = med)
boxplot(count ~ spray, data = InsectSprays)
title(main="Effect of different sprays on insect count")
View(d)
res.aov <- aov(count ~ spray, data = InsectSprays)
summary(res.aov)
tukey.test <- TukeyHSD(res.aov)
print(tukey.test)
library(agricolae)
letter_test <- HSD.test(res.aov, "spray")
letter_test
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "b", "b", "b", "a"))
krus <- kruskal(InsectSprays$count, InsectSprays$spray)
print(krus)
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
res.aov2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(res.aov2)
tukey.test2 <- TukeyHSD(res.aov2)
print(tukey.test2)
plot(tukey.test2)
# Performing the agricolae test
letter_test2 <- HSD.test(res.aov2, "spray")
letter_test2
# putting up the plot
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
# shapiro test for the 1 anova analysis
shapiro.test(res.aov$residuals)
# shapiro test for the 2 anova analysis
shapiro.test(res.aov2$residuals)
qqpnorm(res.aov$residuals, main = "QQplot for Direct anova")
install.packages("qqplotr")
qqpnorm(res.aov$residuals, main = "QQplot for Direct anova")
qqline(res.aov$residuals)
qqnorm(res.aov$residuals, main = "QQplot for Direct anova")
qqline(res.aov$residuals)
qqnorm(res.aov2$residuals, main = "QQplot for square transformed anova")
qqline(res.aov2$residuals)
knitr::opts_chunk$set(echo = TRUE)
qqnorm(res.aov$residuals, main = "QQplot for Direct anova")
qqline(res.aov$residuals)
## For the data InsectSpray, make a table for the number of insects for each spray with the mean, median and standard error.
#Note: Remember to use knitr::kable(), or a similar function to print the table with its caption.
me <- med <- se <- In <- numeric()
sp <- character()
for(i in levels(InsectSprays$spray)){   #i is a random value given to the spray column.
for(j in names(InsectSprays)[-2]){    #j is a random value given to the count column.
sp <-c(sp,i)                   # vector that allows to go through the values related to the levels of spray.
x <- InsectSprays[InsectSprays$spray ==i,j]
me <- round(c(me, mean(x)), 2)
se <- round(c(se, sd(x) / sqrt(length(x))),2)
med <- c(med, median(x))
In <- c(In, sum(x))
}
}
d <- data.frame(Spray  = sp,
Insects_count = In,
Mean = me,
Standarderror = se,
Median = med)
## Exercice 2. Print a plot to see the differences of counts between sprays.
#Include a caption explaining the figure. Which type of plot is the one you choose and why?
boxplot(count ~ spray, data = InsectSprays)
title(main="Effect of different sprays on insect count")
## Exercice 3. Test for differences between sprays using anova and a posthoc comparison.
res.aov <- aov(count ~ spray, data = InsectSprays)
summary(res.aov)
tukey.test <- TukeyHSD(res.aov)
print(tukey.test)
## install packages: agricolae
library(agricolae)
letter_test <- HSD.test(res.aov, "spray")
letter_test
## Redo the previous plot including the representation of all posthoc differences.
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "b", "b", "b", "a"))
## Exercice 4. Test for differences between sprays using non-parametric Kruskal-Wallis rank sum test.
# Again, redo the plot with these results. Use agricolae::kruskal().
krus <- kruskal(InsectSprays$count, InsectSprays$spray)
print(krus)
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
# Proved that the difference in treatment C and D is significant.
## Exercice 5. Transform count data using sqrt(counts) and redo the anova, the Tukey posthoc comparison and the plot.
res.aov2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(res.aov2)
tukey.test2 <- TukeyHSD(res.aov2)
print(tukey.test2)
plot(tukey.test2)
# Performing the agricolae test
letter_test2 <- HSD.test(res.aov2, "spray")
letter_test2
# putting up the plot
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
## Exercice 6. Test for normality of residuals for the two performed anova analyses of points 4 and 6 using shapiro.test()
# shapiro test for the 1 anova analysis
shapiro.test(res.aov$residuals)
# conclusion: p < 0.05 => the null hypothesis is rejected, there is no normality
# shapiro test for the 2 anova analysis
shapiro.test(res.aov2$residuals)
# conclusion: p > 0.05 => the null hypothesis is accepted, there is normality.
# Use plot the anova to see the qqplots and compare them.
qqnorm(res.aov$residuals, main = "QQplot for Direct anova")
qqline(res.aov$residuals)
qqnorm(res.aov2$residuals, main = "QQplot for square transformed anova")
qqline(res.aov2$residuals)
## For the data InsectSpray, make a table for the number of insects for each spray with the mean, median and standard error.
#Note: Remember to use knitr::kable(), or a similar function to print the table with its caption.
me <- med <- se <- In <- numeric()
sp <- character()
for(i in levels(InsectSprays$spray)){   #i is a random value given to the spray column.
for(j in names(InsectSprays)[-2]){    #j is a random value given to the count column.
sp <-c(sp,i)                   # vector that allows to go through the values related to the levels of spray.
x <- InsectSprays[InsectSprays$spray ==i,j]
me <- round(c(me, mean(x)), 2)
se <- round(c(se, sd(x) / sqrt(length(x))),2)
med <- c(med, median(x))
In <- c(In, sum(x))
}
}
d <- data.frame(Spray  = sp,
Insects_count = In,
Mean = me,
Standarderror = se,
Median = med)
## Exercice 2. Print a plot to see the differences of counts between sprays.
#Include a caption explaining the figure. Which type of plot is the one you choose and why?
boxplot(count ~ spray, data = InsectSprays)
title(main="Effect of different sprays on insect count")
## Exercice 3. Test for differences between sprays using anova and a posthoc comparison.
res.aov <- aov(count ~ spray, data = InsectSprays)
summary(res.aov)
tukey.test <- TukeyHSD(res.aov)
print(tukey.test)
## install packages: agricolae
library(agricolae)
letter_test <- HSD.test(res.aov, "spray")
letter_test
## Redo the previous plot including the representation of all posthoc differences.
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "b", "b", "b", "a"))
## Exercice 4. Test for differences between sprays using non-parametric Kruskal-Wallis rank sum test.
# Again, redo the plot with these results. Use agricolae::kruskal().
krus <- kruskal(InsectSprays$count, InsectSprays$spray)
print(krus)
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
# Proved that the difference in treatment C and D is significant.
## Exercice 5. Transform count data using sqrt(counts) and redo the anova, the Tukey posthoc comparison and the plot.
res.aov2 <- aov(sqrt(count) ~ spray, data = InsectSprays)
summary(res.aov2)
tukey.test2 <- TukeyHSD(res.aov2)
print(tukey.test2)
plot(tukey.test2)
# Performing the agricolae test
letter_test2 <- HSD.test(res.aov2, "spray")
letter_test2
# putting up the plot
plot(count ~ spray, data = InsectSprays, ylim = c(0,30))
text(x = 1:6, y = 29, c("a", "a", "c", "b", "bc", "a"))
## Exercice 6. Test for normality of residuals for the two performed anova analyses of points 4 and 6 using shapiro.test()
# shapiro test for the 1 anova analysis
shapiro.test(res.aov$residuals)
# conclusion: p < 0.05 => the null hypothesis is rejected, there is no normality
# shapiro test for the 2 anova analysis
shapiro.test(res.aov2$residuals)
# conclusion: p > 0.05 => the null hypothesis is accepted, there is normality.
# Use plot the anova to see the qqplots and compare them.
qqnorm(res.aov$residuals, main = "QQplot for Direct anova")
qqline(res.aov$residuals)
qqnorm(res.aov2$residuals, main = "QQplot for square transformed anova")
qqline(res.aov2$residuals)
